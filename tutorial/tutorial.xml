<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.2//EN" "http://www.oasis-open.org/docbook/xml/4.2/docbookx.dtd">
<book id="tutorial" lang="de">
   <title>Einführung in das collections Paket</title>
   <chapter id="introduction">
      <title>Einleitung</title>
      <para>Das <application class="software">collections</application> Paket basiert auf der SPL
         extension von PHP5 und nutzt intensiv die damit eingeführten Iteratoren.</para>
      <para>Das Paket enthält neben den wichtigsten Collections auch die für die Entwicklung
         notwendigen Interfaces und Exceptions.</para>
   </chapter>
   <chapter id="system_dependencies">
      <title>Systemvoraussetzungen</title>
      <simplelist>
         <member>PHP ab Version 5.0.x</member>
         <member><application class="software">lang</application> Paket</member>
      </simplelist>
      <para/>
   </chapter>
   <chapter id="installation">
      <title>Installation</title>
      <para>Die Installation erfolgt wie alle Pakte aus dem struts4php Framework über den PEAR
         Installer.</para>
      <para>Hierzu muss, falls noch nicht erfolgt, zuerst der Channel pear.struts4php.org in PEAR
         Installer aufgenommen werden. Dies kann über die Kommandozeile mit dem Befehl <command>pear
            channel-discover pear.struts4php.org</command> durchgeführt werden. </para>
      <para>Die eigentliche Installation kann dann ebenfalls über die Kommandozeile durch Eingabe
         von <command>pear install struts4php/collections</command> vorgenommen werden.</para>
   </chapter>
   <chapter id="usage">
      <title>Verwendung</title>
      <para>Anhand der folgenden Beispiel soll die Verwendung der im Paket enthaltenen Klassen
         veranschaulicht werden.</para>
      <sect1 id="array_list">
         <title>ArrayList</title>
         <subtitle>Verwendung der ArrayList</subtitle>
         <para>Die Klasse ArrayList wird als Container verwendet, der unendlich viele Elemente
            verschiedener Datentypen enthalten kann. Über verschiedene Methoden können neue Element
            hinzugefügt sowie enthaltene zurückgegeben oder gelöscht werden. Die ArrayList ist
            grundsätzlich unsortiert und hat einen fortlaufenden Index, der bei 0 beginnt.</para>
         <example id="example_array_list">
            <title>ArrayList</title>
            <programlisting role="php">
                  // initialize a new ArrayList object
                  <varname>$list</varname> = new <classname>ArrayList</classname>();
                  
                  // add several values
                  <varname>$list</varname>->add(new <classname>Integer</classname>(1));
                  <varname>$list</varname>->add(new <classname>Integer</classname>(2));
                  
                  <command>foreach</command>(<varname>$list</varname> as  <varname>$key</varname> => <varname>$item</varname>) {
                     <command>echo</command> <computeroutput>"Found item with key "</computeroutput> . <varname>$key</varname> .  <computeroutput>" value "</computeroutput> . <varname>$item</varname>-><methodname>__toString</methodname>() . <computeroutput>&lt;br/&gt;</computeroutput>;
                  }
               
                  // produces the following output
                  <computeroutput>Found item with key 0 and value 1</computeroutput>
                  <computeroutput>Found item with key 1 and value 2</computeroutput>
               </programlisting>
         </example>
      </sect1>
      <sect1 id="hash_map">
         <title>HashMap</title>
         <subtitle>Verwendung der HashMap</subtitle>
         <para>Die Klasse HashMap wird, ebenfalls wie die ArrayList, als Container verwendet, der
            unendlich viele Elemente verschiedener Datentypen enthalten kann. Über verschiedene
            Methoden können neue Element hinzugefügt sowie enthaltene zurückgegeben oder gelöscht
            werden. Die HashMap ist, wie die ArrayList, grundsätzlich unsortiert und hat einen frei
            wählbaren, aus einfachen Datentypen betehenden Index.</para>
         <example id="example_hash_map">
            <title>HashMap</title>
            <programlisting role="php">
               // initialize a new HashMap object
               <varname>$map</varname> = new <classname>HashMap</classname>();
               
               // add several values
               <varname>$map</varname>->add("number", new <classname>Integer</classname>(1));
               <varname>$map</varname>->add("string", new <classname>String</classname>("foo"));
               
               <command>foreach</command>(<varname>$list</varname> as <varname>$key</varname> => <varname>$item</varname>) {
                  <command>echo</command> <computeroutput>"Found item with key "<computeroutput> . <varname>$key</varname> . </computeroutput>" and value "</computeroutput> . <varname>$item</varname>-><methodname>__toString</methodname>() . <computeroutput>&lt;br/&gt;</computeroutput>;
               }
               
               // produces the following output
               <computeroutput>Found item with key number and value 1</computeroutput>
               <computeroutput>Found item with key string and value foo</computeroutput>
            </programlisting>
         </example>
      </sect1>
      <sect1 id="dictionary">
         <title>Dictionary</title>
         <subtitle>Verwendung des Dictionary</subtitle>
         <para>Die Klasse Dictionary wird, ebenfalls wie die ArrayList oder die HashMap, als
            Container verwendet, der unendlich viele Elemente verschiedener Datentypen enthalten
            kann. Über verschiedene Methoden können neue Element hinzugefügt sowie enthaltene
            zurückgegeben oder gelöscht werden. Das Dictionary ist, wie die ArrayList, grundsätzlich
            unsortiert, verwendet aber entgegen der ArrayList oder der HashMap einen frei wählbaren,
            aus komplexen Datentypen betehenden Index.</para>
         <example id="example_dictionary">
            <title>Dictionary</title>
            <programlisting role="php">
               // initialize a new Dictionary object
               <varname>$dictionary</varname> = new <classname>Dictionary</classname>();
               
               // add several values
               <varname>$dictionary</varname>->add(new Integer(1), new <classname>Integer</classname>(12));
               <varname>$dictionary</varname>->add(new String("foo"), new <classname>String</classname>("foo"));
               
               <command>foreach</command>(<varname>$dictionary</varname> as <varname>$key</varname> => <varname>$item</varname>) {
                  <command>echo</command> <computeroutput>"Found item with key "<computeroutput> . <varname>$key</varname>-><methodname>__toString</methodname>() . </computeroutput>" and value "</computeroutput> . <varname>$item</varname>-><methodname>__toString</methodname>() . <computeroutput>&lt;br/&gt;</computeroutput>;
               }
               
               // produces the following output
               <computeroutput>Found item with key 1 and value foo</computeroutput>
               <computeroutput>Found item with key foo and value 12</computeroutput>
            </programlisting>
         </example>
      </sect1>
      <sect1 id="tree_map">
         <title>TreeMap</title>
         <subtitle>Verwendung der TreeMap</subtitle>
         <para>Die TreeMap entspricht nahezu einer HashMap, mit dem Unterschied, dass die Elemente
            entweder immer aufsteigend, oder durch das dem Konstruktor bei der Instanzierung
            übergebene Predicate, sortiert sind</para>
         <example id="example_tree_map">
            <title>TreeMap</title>
            <programlisting role="php">
               // initialize a new TreeMap object
               <varname>$map</varname> = new <classname>TreeMap</classname>();
               
               // add several values
               <varname>$map</varname>->add(2, new <classname>Integer</classname>(12));
               <varname>$map</varname>->add(1, new <classname>String</classname>("foo"));
               
               <command>foreach</command>(<varname>$map</varname> as <varname>$key</varname> => <varname>$item</varname>) {
                  <command>echo</command> <computeroutput>"Found item with key "<computeroutput> . <varname>$key</varname> . </computeroutput>" and value "</computeroutput> . <varname>$item</varname>-><methodname>__toString</methodname>() . <computeroutput>&lt;br/&gt;</computeroutput>;
               }
               
               // produces the following output
               <computeroutput>Found item with key 1 and value foo</computeroutput>
               <computeroutput>Found item with key 2 and value 12</computeroutput>
            </programlisting>
         </example>
         <example id="example_tree_map_with_comparator">
            <title>TreeMap, sortiert mit Comparator</title>
            <programlisting role="php">
               // define class TestComparator to sort TreeMap by value
               class <classname>TestComparator</classname> implements <classname>Comparator</classname> {
                  public function <methodname>compare</methodname>(<varname>$object1</varname>, <varname>$object2</varname>) {
                     if(<varname>$object1</varname>-><methodname>intValue</methodname>() &lt; <varname>$object2</varname>-><methodname>intValue</methodname>()) {
                        <command>return</command> -1;
                     }
                     if(<varname>$object1</varname>-><methodname>intValue</methodname>() &gt; <varname>$object2</varname>-><methodname>intValue()</methodname>) {
                        <command>return</command> 1;
                     }
                     if(<varname>$object1</varname>-><methodname>intValue</methodname>() == <varname>$object2</varname>-><methodname>intValue</methodname>()) {
                        <command>return</command> 0;
                     }
                  }
               }
               
               // initialize a new TreeMap object and pass the TestComparator to the constructor
               <varname>$map</varname> = new <classname>TreeMap</classname>(new TestComparator());
               
               // add several values
               <varname>$map</varname>->add(1, new <classname>Integer</classname>(14));
               <varname>$map</varname>->add(2, new <classname>Integer</classname>(13));
               <varname>$map</varname>->add(3, new <classname>Integer</classname>(15));
               
               <command>foreach</command>(<varname>$map</varname> as <varname>$key</varname> => <varname>$item</varname>) {
                  <command>echo</command> <computeroutput>"Found item with key "<computeroutput> . <varname>$key</varname> . </computeroutput>" and value "</computeroutput> . <varname>$item</varname>-><methodname>__toString</methodname>() . "<computeroutput>&lt;br/&gt;</computeroutput>";
               }
               
               // produces the following output
               <computeroutput>Found item with key 2 and value 13</computeroutput>
               <computeroutput>Found item with key 1 and value 14</computeroutput>
               <computeroutput>Found item with key 3 and value 15</computeroutput>
            </programlisting>
         </example>
      </sect1>
   </chapter>
</book>
